数组:
    定义: var a [3] int    初始化: var a= [4]string{"北", "上", "广", "深"}  编译器推导长度: var a = [...]int{1, 2, 3}
    索引初始化: var a = [...]string{1:"1", 2:"2"}

    遍历: 1:for 循环   2: for index(_), value := range a {}

    二维:  外层可以使用[...]
        a := [3][2] string{
            {},
            {},
            {}
        }
        for _, v1 := range a {
            for _, v2 := range v1 {
                
            }
        }

切片:
    基于数组: a := [...]{1, 2, 3}  b := a[1:2]    make构造切片: a := make([]int, 5, 10)  5个元素容量为10
    获取容量:cap()
    切片不能直接比较,用nil判断底层是否创建数组

    a := []int b = append(a, 1, 2, 3)函数扩容   b := []int{1, 2, 3, 4}   a = append(a, b...)
    开头添加: append([]int{}, a...)
    copy()复制切片到别的空间(深拷贝)
    删除: a = append(a[:index], a[index+1:]...)  若 a:=[...]int{} 则无法直接赋值到原来的变量
    排序: sort.Ints(a[:]) //int类型

map(字典):
    位置随机存储
    初始化 var a mpa[string]int  key为string value为int      make(map[string]int, 8)
            a := map[int]bool{
                1:true,
                2:false,
            }

    判断键值是否存在: value, ok := aMap["key"]
    遍历: for k, v := range aMap{}
    删除: delete(aMap, key)

    元素类型为map的切片:
    {
        a := make([]map[string]int, 0, 8)
        a[0] = make(map[string]int,3)  //对map初始化
        a[0]["1"] = 1
    }
    值为切片的map:
    {
        a := make(map[string][]int, 4)
	    a["1"] = make([]int ,0, 3)  //赋值时可以不用添加默认0, append时加就不会多出元素
	    // a["1"][0] = 1
	    // a["1"][1] = 2 
	    // a["1"][2] = 3 
	    a["1"] = append(a["1"], 1, 2, 3)
	    fmt.Println(a)
    }
    map 返回值： v, ok := a[1] 返回元素Key和是否存在该元素

类型转换:{
    fmt.Scandf("%d", &a)  // 信息输入       

    方式一: fmt.Sprintf("%", )   返回格式化字符串

    方式二: 使用strconv
        .FormatInt(int64(), 输出进制)
        .FormatFloat
        .Itoa()   // int转string

        .ParseBool() // 字符转bool
}
位运算:{
    整数原码、补码、反码都一样
    负数第一位为1表示符号位    符数补码=反码+1
    计算机以补码的方式运行

    2&3= 2  2 补码 0000 0010  3 补码: 0000 0011    相同取1: 0000 0010     
    2|3= 3  有一取一: 0000 0010
    2^3= 1  异或相同取0: 0000 0001
}
获取命令输入{
    flag.Stringvar(&变量名, "命令行字符", "默认值", "说明")
}
%% 一个%字面量

%b 一个二进制整数值(基数为2)，或者是一个(高级的)用科学计数法表示的指数为2的浮点数

%c 字符型。可以把输入的数字按照ASCII码相应转换为对应的字符

%d 一个十进制数值(基数为10)

%f 以标准记数法表示的浮点数或者复数值

%o 一个以八进制表示的数字(基数为8)

%p 以十六进制(基数为16)表示的一个值的地址，前缀为0x,字母使用小写的a-f表示

%q 使用Go语法以及必须时使用转义，以双引号括起来的字符串或者字节切片[]byte，或者是以单引号括起来的数字

%s 字符串。输出字符串中的字符直至字符串中的空字符（字符串以'\0‘结尾，这个'\0'即空字符）

%t 以true或者false输出的布尔值

%T 使用Go语法输出的值的类型

%x 以十六进制表示的整型值(基数为十六)，数字a-f使用小写表示

%X 以十六进制表示的整型值(基数为十六)，数字A-F使用小写表示