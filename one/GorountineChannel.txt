进程:系统资源分配和调度的基本单位
线程:进程的实例  程序执行的最小单元
协程:gorountine   特点:独立的栈空间   共享程序堆空间  调度由用户控制  轻量级线程
     go的协程是轻量级的 可以开启上万个协程

管道:channel
并发:多线程在单核上运行
并行:多线程在多核上运行

主线程结束协程结束
MPG调度模型: M:操作系统主线程(物理线程)   P:协程执行需要的上下文    G:协程
            当协程阻塞时(读文件,数据库),会创建另一个主线程(可能是从已有的线程池中取出),被阻塞的协程回到该主线程执行

开启协程:  go ...     go build -race 查看资源竞争  输出时可能也会产生资源竞争
不通协程间的通讯: 全局变量加锁同步(剩余协程加入到队列缓存)需要设置休眠时间   互斥锁 使用低水平线程   高水平使用通道

channel:{
     本质是队列   线程安全    多协程操作同意个管道时,不会放生资源竞争   只能存放对应的数据类型
     管道声明: var name(变量名) chan 数据类型 使用初始化 make(chan int, 3)  初始化为管道的地址
     
     向管道写入数据: 管道变量<- value   cap()  // 获取make初始化容量
     取数据: num := <-chanvalue   // 没有使用协程的情况下,若管道数据全部取完会照成死锁(deadlock)
     
     类型为接口类型时需要用断言获取类型, 管道取出的值.()
}


runtime.Nowcpu()  // 获取当前系统cpu数
runtime.GOMAXPROCS()  // 最大同时执行cpu数目
